const fs = require('fs');
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');
const axios = require('axios'); // Import axios for making HTTP requests
const xml2js = require('xml2js'); // Import xml2js for XML parsing
const EventEmitter = require('events');
require('dotenv').config(); // Load environment variables

// Create global event emitter for settings updates
global.eventEmitter = new EventEmitter();

class WhatsAppBot {
    constructor(io = null) {
        this.io = io; // Socket.io instance for real-time updates
        this.client = new Client({
            authStrategy: new LocalAuth(),
            puppeteer: {
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu'
                ]
            }
        });

        this.userData = new Map(); // Store user data
        this.countries = this.loadCountries(); // Load country list
        this.setupEventHandlers();
        this.loadSettings();

        // Listen for settings updates
        global.eventEmitter.on('settingsUpdated', (settings) => {
            console.log('Settings updated:', settings);
            this.updateSettings(settings);
        });
    }

    loadSettings() {
        try {
            const settings = JSON.parse(fs.readFileSync('settings.json', 'utf8'));
            this.updateSettings(settings);
        } catch (error) {
            console.error('Error loading settings:', error);
            // Use default settings from the original code
            this.OPENAI_API_KEY = process.env.OPENAI_API_KEY;
            this.TOURVISOR_LOGIN = process.env.TOURVISOR_LOGIN;
            this.TOURVISOR_PASS = process.env.TOURVISOR_PASS;
            this.SYSTEM_PROMPT = 'You are a helpful travel agent assistant. Provide friendly and informative responses about travel-related questions. If someone asks about booking a tour, remind them they can type "—Ç—É—Ä" to start the booking process.';
        }
    }

    updateSettings(settings) {
        this.OPENAI_API_KEY = settings.openaiApiKey || "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";
        this.TOURVISOR_LOGIN = settings.tourvisorLogin || "admotionapp@gmail.com";
        this.TOURVISOR_PASS = settings.tourvisorPass || "sjqVZ4QLNLBN5";
        this.SYSTEM_PROMPT = settings.systemPrompt || "Your name is TourAI. You are a helpful travel agent assistant. Provide friendly and informative responses about travel-related questions. If someone asks about booking a tour, remind them they can type \"—Ç—É—Ä\" to start the booking process.";
    }

    loadCountries() {
        // Define the list of countries
        return [
            { id: "46", name: "–ê–±—Ö–∞–∑–∏—è" },
            { id: "31", name: "–ê–≤—Å—Ç—Ä–∏—è" },
            { id: "55", name: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω" },
            { id: "71", name: "–ê–ª–±–∞–Ω–∏—è" },
            { id: "17", name: "–ê–Ω–¥–æ—Ä—Ä–∞" },
            { id: "88", name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞" },
            { id: "53", name: "–ê—Ä–º–µ–Ω–∏—è" },
            { id: "72", name: "–ê—Ä—É–±–∞" },
            { id: "59", name: "–ë–∞—Ö—Ä–µ–π–Ω" },
            { id: "57", name: "–ë–µ–ª–∞—Ä—É—Å—å" },
            { id: "20", name: "–ë–æ–ª–≥–∞—Ä–∏—è" },
            { id: "39", name: "–ë—Ä–∞–∑–∏–ª–∏—è" },
            { id: "44", name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è" },
            { id: "37", name: "–í–µ–Ω–≥—Ä–∏—è" },
            { id: "90", name: "–í–µ–Ω–µ—Å—É—ç–ª–∞" },
            { id: "16", name: "–í—å–µ—Ç–Ω–∞–º" },
            { id: "38", name: "–ì–µ—Ä–º–∞–Ω–∏—è" },
            { id: "6", name: "–ì—Ä–µ—Ü–∏—è" },
            { id: "54", name: "–ì—Ä—É–∑–∏—è" },
            { id: "11", name: "–î–æ–º–∏–Ω–∏–∫–∞–Ω–∞" },
            { id: "1", name: "–ï–≥–∏–ø–µ—Ç" },
            { id: "30", name: "–ò–∑—Ä–∞–∏–ª—å" },
            { id: "3", name: "–ò–Ω–¥–∏—è" },
            { id: "7", name: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è" },
            { id: "29", name: "–ò–æ—Ä–¥–∞–Ω–∏—è" },
            { id: "92", name: "–ò—Ä–∞–Ω" },
            { id: "14", name: "–ò—Å–ø–∞–Ω–∏—è" },
            { id: "24", name: "–ò—Ç–∞–ª–∏—è" },
            { id: "78", name: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" },
            { id: "40", name: "–ö–∞–º–±–æ–¥–∂–∞" },
            { id: "79", name: "–ö–∞—Ç–∞—Ä" },
            { id: "51", name: "–ö–µ–Ω–∏—è" },
            { id: "15", name: "–ö–∏–ø—Ä" },
            { id: "60", name: "–ö–∏—Ä–≥–∏–∑–∏—è" },
            { id: "13", name: "–ö–∏—Ç–∞–π" },
            { id: "10", name: "–ö—É–±–∞" },
            { id: "80", name: "–õ–∏–≤–∞–Ω" },
            { id: "27", name: "–ú–∞–≤—Ä–∏–∫–∏–π" },
            { id: "36", name: "–ú–∞–ª–∞–π–∑–∏—è" },
            { id: "8", name: "–ú–∞–ª—å–¥–∏–≤—ã" },
            { id: "50", name: "–ú–∞–ª—å—Ç–∞" },
            { id: "23", name: "–ú–∞—Ä–æ–∫–∫–æ" },
            { id: "18", name: "–ú–µ–∫—Å–∏–∫–∞" },
            { id: "81", name: "–ú—å—è–Ω–º–∞" },
            { id: "82", name: "–ù–µ–ø–∞–ª" },
            { id: "9", name: "–û–ê–≠" },
            { id: "64", name: "–û–º–∞–Ω" },
            { id: "87", name: "–ü–∞–Ω–∞–º–∞" },
            { id: "35", name: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è" },
            { id: "47", name: "–†–æ—Å—Å–∏—è" },
            { id: "93", name: "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è" },
            { id: "28", name: "–°–µ–π—à–µ–ª—ã" },
            { id: "58", name: "–°–µ—Ä–±–∏—è" },
            { id: "25", name: "–°–∏–Ω–≥–∞–ø—É—Ä" },
            { id: "43", name: "–°–ª–æ–≤–µ–Ω–∏—è" },
            { id: "2", name: "–¢–∞–∏–ª–∞–Ω–¥" },
            { id: "41", name: "–¢–∞–Ω–∑–∞–Ω–∏—è" },
            { id: "5", name: "–¢—É–Ω–∏—Å" },
            { id: "4", name: "–¢—É—Ä—Ü–∏—è" },
            { id: "56", name: "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω" },
            { id: "26", name: "–§–∏–ª–∏–ø–ø–∏–Ω—ã" },
            { id: "34", name: "–§–∏–Ω–ª—è–Ω–¥–∏—è" },
            { id: "32", name: "–§—Ä–∞–Ω—Ü–∏—è" },
            { id: "22", name: "–•–æ—Ä–≤–∞—Ç–∏—è" },
            { id: "21", name: "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è" },
            { id: "19", name: "–ß–µ—Ö–∏—è" },
            { id: "52", name: "–®–≤–µ–π—Ü–∞—Ä–∏—è" },
            { id: "12", name: "–®—Ä–∏-–õ–∞–Ω–∫–∞" },
            { id: "69", name: "–≠—Å—Ç–æ–Ω–∏—è" },
            { id: "70", name: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è" },
            { id: "33", name: "–Ø–º–∞–π–∫–∞" },
            { id: "49", name: "–Ø–ø–æ–Ω–∏—è" }
        ];
    }

    setupEventHandlers() {
        // QR Code generation (only needed for first-time setup)
        this.client.on('qr', (qr) => {
            qrcode.generate(qr, { small: true });
            console.log('QR Code generated. Please scan with WhatsApp!');
            
            // If we have Socket.io, emit the QR code to the admin panel
            if (this.io) {
                // Generate a PNG data URL from the QR code
                const qrCodeLibrary = require('qrcode');
                qrCodeLibrary.toDataURL(qr, (err, url) => {
                    if (err) {
                        console.error('Error generating QR code data URL:', err);
                        return;
                    }
                    this.io.emit('qrCode', url);
                });
            }
        });

        // Ready event
        this.client.on('ready', () => {
            console.log('WhatsApp bot is ready!');
            // Notify the admin panel that the bot is ready
            if (this.io) {
                this.io.emit('botStatus', { status: 'ready' });
            }
        });

        // Message handling
        this.client.on('message', async (msg) => {
            if (msg.fromMe) return; // Ignore messages from the bot itself
            await this.handleMessage(msg);
        });

        // Authentication failed event
        this.client.on('auth_failure', (msg) => {
            console.error('Authentication failed:', msg);
            if (this.io) {
                this.io.emit('botStatus', { status: 'auth_failure', message: msg });
            }
        });

        // Disconnected event
        this.client.on('disconnected', (reason) => {
            console.log('Client was disconnected:', reason);
            if (this.io) {
                this.io.emit('botStatus', { status: 'disconnected', reason });
            }
        });
    }

    async handleMessage(msg) {
        const userId = msg.from;
        console.log(`üì© Received message from user ${userId}: '${msg.body}'`);

        if (!this.userData.has(userId)) {
            this.userData.set(userId, {
                isSearching: false,
                awaitingDeparture: false,
                awaitingCountry: false,
                awaitingNights: false,
                awaitingAdults: false,
                awaitingChildren: false,
                departure: null,
                country: null,
                nights: null,
                adults: null,
                children: null
            });
            await this.safeSendMessage(msg, 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —Ç—É—Ä–∞–≥–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—É—Ä –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "—Ç—É—Ä".');
            return;
        }

        const userParams = this.userData.get(userId);

        if (msg.body.toLowerCase() === '—Ç—É—Ä') {
            userParams.isSearching = true;
            userParams.awaitingDeparture = true;
            await this.safeSendMessage(msg, 'üèôÔ∏è –ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—Ç–µ—Ç—å?');
            return;
        }

        if (userParams.isSearching) {
            await this.handleTourSearch(msg, userParams);
        } else {
            const response = await this.getChatGPTResponse(msg.body);
            await this.safeSendMessage(msg, response);
        }
    }

    async handleTourSearch(msg, userParams) {
        try {
            if (userParams.awaitingDeparture) {
                userParams.departure = msg.body; // Store the city name
                userParams.awaitingDeparture = false;
                userParams.awaitingCountry = true;
                await this.askCountry(msg);
            } else if (userParams.awaitingCountry) {
                const cityName = msg.body.trim();
                const countryId = await this.getCountryIdFromCity(cityName);
                if (countryId) {
                    userParams.country = countryId; // Store the country ID
                    userParams.awaitingCountry = false;
                    userParams.awaitingNights = true;
                    await this.askNights(msg);
                } else {
                    await this.safeSendMessage(msg, 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ –≥–æ—Ä–æ–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É.');
                }
            } else if (userParams.awaitingNights) {
                const nights = msg.body.split('-').map(Number);
                if (nights.length === 2) {
                    userParams.nights = nights; // Store as an array [nightsFrom, nightsTo]
                    userParams.awaitingNights = false;
                    userParams.awaitingAdults = true;
                    await this.askAdults(msg);
                } else {
                    await this.safeSendMessage(msg, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X-Y", –Ω–∞–ø—Ä–∏–º–µ—Ä "7-14".');
                }
            } else if (userParams.awaitingAdults) {
                userParams.adults = msg.body;
                userParams.awaitingAdults = false;
                userParams.awaitingChildren = true;
                await this.askChildren(msg);
            } else if (userParams.awaitingChildren) {
                userParams.children = msg.body;
                userParams.awaitingChildren = false;
                await this.confirmSearch(msg, userParams);
            }
        } catch (error) {
            console.error('Error in handleTourSearch:', error);
            await this.safeSendMessage(msg, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ "—Ç—É—Ä" –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–Ω–æ–≤–æ.');
            this.resetUserState(msg.from);
        }
    }

    async confirmSearch(msg, userParams) {
        console.log(`Starting search with the following parameters:`);
        console.log(`Departure: ${userParams.departure}`); // This is the city name
        console.log(`Country ID: ${userParams.country}`); // This should be the country ID
        console.log(`Nights: ${userParams.nights.join('-')}`);
        console.log(`Adults: ${userParams.adults}`);
        console.log(`Children: ${userParams.children}`);

        await this.safeSendMessage(msg, '–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...');

        // Proceed to start the tour search
        const requestId = await this.startTourSearch(msg, userParams);
        if (requestId) {
            await this.getSearchResults(requestId, msg); // Directly get results
        }
    }

    async formatSearchRequest(userParams) {
        const today = new Date();
        const dateFrom = new Date(today);
        dateFrom.setDate(today.getDate() + 1);
        const dateTo = new Date(today);
        dateTo.setDate(today.getDate() + 30);

        const formattedDateFrom = `${dateFrom.getDate().toString().padStart(2, '0')}.${(dateFrom.getMonth() + 1).toString().padStart(2, '0')}.${dateFrom.getFullYear()}`;
        const formattedDateTo = `${dateTo.getDate().toString().padStart(2, '0')}.${(dateTo.getMonth() + 1).toString().padStart(2, '0')}.${dateTo.getFullYear()}`;

        return `http://tourvisor.ru/xml/search.php?authlogin=${this.TOURVISOR_LOGIN}&authpass=${this.TOURVISOR_PASS}&departure=${userParams.country}&country=${userParams.country}&datefrom=${formattedDateFrom}&dateto=${formattedDateTo}&nightsfrom=${userParams.nights[0]}&nightsto=${userParams.nights[1]}&adults=${userParams.adults}&child=${userParams.children}&format=xml`;
    }

    async startTourSearch(msg, userParams) {
        const apiUrl = await this.formatSearchRequest(userParams);
        console.log(`Making API request to: ${apiUrl}`);

        try {
            const response = await axios.get(apiUrl);
            console.log(`API Response: ${response.data}`);
            const result = await this.parseApiResponse(response.data);
            return result.requestid; // Return the request ID for direct result fetching
        } catch (error) {
            console.error('Error making API request:', error);
            await this.safeSendMessage(msg, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤.');
            return null;
        }
    }

    async getSearchResults(requestId, msg) {
        const resultsUrl = `http://tourvisor.ru/xml/result.php?authlogin=${this.TOURVISOR_LOGIN}&authpass=${this.TOURVISOR_PASS}&requestid=${requestId}&type=result`;
        console.log(`Fetching results from: ${resultsUrl}`);

        try {
            // Wait a few seconds for the search to complete
            await this.safeSendMessage(msg, 'üîç –ò—â–µ–º —Ç—É—Ä—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...');
            await new Promise(resolve => setTimeout(resolve, 5000));

            const response = await axios.get(resultsUrl);
            const parser = new xml2js.Parser();
            
            const result = await new Promise((resolve, reject) => {
                parser.parseString(response.data, (err, result) => {
                    if (err) reject(err);
                    else resolve(result);
                });
            });

            // Check if we have data and hotels
            if (result.data && result.data.result && result.data.result[0].hotel) {
                await this.handleResults(response.data, msg);
            } else {
                await this.safeSendMessage(msg, 'üîÑ –ü–æ–∏—Å–∫ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –Ω–∞–ø–∏—Å–∞–≤ "—Ç—É—Ä"');
            }
        } catch (error) {
            console.error('Error fetching results:', error);
            await this.safeSendMessage(msg, 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    async handleResults(xmlData, msg) {
        const parser = new xml2js.Parser();
        parser.parseString(xmlData, async (err, result) => {
            if (err) {
                console.error('Error parsing results:', err);
                await this.safeSendMessage(msg, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.');
                this.resetUserState(msg.from);
                return;
            }

            // Check if the result contains hotels
            const hotels = result.data.result[0].hotel;
            if (hotels && hotels.length > 0) {
                let responseMessage = 'üè® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏:\n';
                hotels.forEach(hotel => {
                    const hotelName = hotel.hotelname[0];
                    const price = hotel.price[0];
                    const description = hotel.hoteldescription[0];
                    const fullDescLink = hotel.fulldesclink[0];
                    const countryname = hotel.countryname[0];
                    const hotelstars = hotel.hotelstars[0];
                    // Extracting fly dates from tours
                    const tours = hotel.tours[0].tour;
                    const flydate = tours.map(tour => tour.flydate[0]).join(', ');

                    responseMessage += `\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ: ${hotelName}\nüí∞ –¶–µ–Ω–∞: ${price} —Ç–≥.\n –ó–≤–µ–∑–¥—ã: ${hotelstars} \n–°—Ç—Ä–∞–Ω–∞ ${countryname}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\nüîó –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: http://manyhotels.ru/${fullDescLink}\n`;
                });
                await this.safeSendMessage(msg, responseMessage);
                await this.safeSendMessage(msg, '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "—Ç—É—Ä" –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.');
            } else {
                await this.safeSendMessage(msg, 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "—Ç—É—Ä" –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.');
            }
            
            // Reset user state after showing results
            this.resetUserState(msg.from);
        });
    }

    async parseApiResponse(xmlData) {
        const parser = new xml2js.Parser();
        return new Promise((resolve, reject) => {
            parser.parseString(xmlData, (err, result) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(result.result);
                }
            });
        });
    }

    async getCountryIdFromCity(cityName) {
        // Predefined mapping of cities to country IDs
        const cityCountryMap = {
            // Kazakhstan cities
            "–ê–ª–º–∞—Ç—ã": 78,
            "–ê—Å—Ç–∞–Ω–∞": 78,
            "–®—ã–º–∫–µ–Ω—Ç": 78,
            "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞": 78,
            "–ö–æ—Å—Ç–∞–Ω–∞–π": 78,
            "–ö—ã–∑—ã–ª–æ—Ä–¥–∞": 78,
            "–ê–∫—Ç–∞—É": 78,
            "–ê—Ç—ã—Ä–∞—É": 78,
            "–ü–∞–≤–ª–æ–¥–∞—Ä": 78,
            "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫": 78,
            "–°–µ–º–µ–π": 78,
            "–¢–∞—Ä–∞–∑": 78,
            "–£—Ä–∞–ª—å—Å–∫": 78,
            "–ê–∫—Ç–æ–±–µ": 78,

            // Turkey cities
            "–ê–Ω—Ç–∞–ª–∏—è": 4,
            "–°—Ç–∞–º–±—É–ª": 4,
            "–ë–æ–¥—Ä—É–º": 4,
            "–ú–∞—Ä–º–∞—Ä–∏—Å": 4,
            "–ê–ª–∞–Ω–∏—è": 4,
            "–ö–µ–º–µ—Ä": 4,
            "–§–µ—Ç—Ö–∏–µ": 4,
            "–¢—É—Ä—Ü–∏—è": 4,

            // UAE cities
            "–î—É–±–∞–π": 9,
            "–ê–±—É-–î–∞–±–∏": 9,
            "–®–∞—Ä–¥–∂–∞": 9,
            "–†–∞—Å-—ç–ª—å-–•–∞–π–º–∞": 9,
            "–ê–¥–∂–º–∞–Ω": 9,
            "–û–ê–≠": 9,
            "–≠–º–∏—Ä–∞—Ç—ã": 9,

            // Egypt cities
            "–•—É—Ä–≥–∞–¥–∞": 1,
            "–®–∞—Ä–º-—ç–ª—å-–®–µ–π—Ö": 1,
            "–ö–∞–∏—Ä": 1,
            "–ï–≥–∏–ø–µ—Ç": 1,

            // Thailand cities
            "–ë–∞–Ω–≥–∫–æ–∫": 2,
            "–ü—Ö—É–∫–µ—Ç": 2,
            "–ü–∞—Ç—Ç–∞–π—è": 2,
            "–°–∞–º—É–∏": 2,
            "–¢–∞–∏–ª–∞–Ω–¥": 2,

            // Russia cities
            "–ú–æ—Å–∫–≤–∞": 47,
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 47,
            "–°–æ—á–∏": 47,
            "–†–æ—Å—Å–∏—è": 47,

            // Common country names
            "–ú–∞–ª—å–¥–∏–≤—ã": 8,
            "–ì—Ä–µ—Ü–∏—è": 6,
            "–ö–∏–ø—Ä": 15,
            "–ò–Ω–¥–∏—è": 3,
            "–í—å–µ—Ç–Ω–∞–º": 16,
            "–®—Ä–∏-–õ–∞–Ω–∫–∞": 12,
            "–ò–Ω–¥–æ–Ω–µ–∑–∏—è": 7,
            "–ë–∞–ª–∏": 7,
            "–°–µ–π—à–µ–ª—ã": 28,
            "–ú–∞–≤—Ä–∏–∫–∏–π": 27,
            "–î–æ–º–∏–Ω–∏–∫–∞–Ω–∞": 11,
            "–ö—É–±–∞": 10,
            "–ò–∑—Ä–∞–∏–ª—å": 30
        };

        // Convert input to title case and trim
        const normalizedCityName = cityName.trim();

        // Check if the city is in the predefined list
        if (cityCountryMap[normalizedCityName]) {
            return cityCountryMap[normalizedCityName];
        } else {
            // If not found, use ChatGPT to find the country
            const countryId = await this.getCountryIdFromChatGPT(normalizedCityName);
            return countryId;
        }
    }

    async getCountryIdFromChatGPT(cityName) {
        const apiKey = this.OPENAI_API_KEY; // Use the hardcoded OpenAI API key
        const endpoint = 'https://api.openai.com/v1/chat/completions';

        try {
            const response = await axios.post(endpoint, {
                model: 'gpt-3.5-turbo',
                messages: [
                    { 
                        role: 'system', 
                        content: 'You are a helpful assistant. Given a city name, provide the corresponding country ID from the predefined list.'
                    },
                    { 
                        role: 'user', 
                        content: `What is the country ID for the city: ${cityName}?`
                    }
                ],
            }, {
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                },
            });

            // Extract the country ID from the response
            const countryId = response.data.choices[0].message.content; // Adjust based on the expected response format
            return countryId;
        } catch (error) {
            console.error('Error connecting to ChatGPT:', error);
            return null; // Return null if there is an error
        }
    }

    async getChatGPTResponse(userMessage) {
        const apiKey = this.OPENAI_API_KEY;
        const endpoint = 'https://api.openai.com/v1/chat/completions';

        try {
            const response = await axios.post(endpoint, {
                model: 'gpt-3.5-turbo',
                messages: [
                    { 
                        role: 'system', 
                        content: this.SYSTEM_PROMPT // Use the dynamic system prompt
                    },
                    { 
                        role: 'user', 
                        content: userMessage 
                    }
                ],
            }, {
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json',
                },
            });

            return response.data.choices[0].message.content;
        } catch (error) {
            console.error('Error connecting to ChatGPT:', error);
            return "üö® –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    async askDeparture(msg) {
        await msg.reply('üèôÔ∏è –ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—Ç–µ—Ç—å?');
    }

    async askCountry(msg) {
        await msg.reply('üåç –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?');
    }

    async askNights(msg) {
        await msg.reply('‚åõ –ù–∞ —Å–∫–æ–ª—å–∫–æ –Ω–æ—á–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É?');
    }

    async askAdults(msg) {
        await msg.reply('üë• –°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–æ–µ–¥–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6)');
    }

    async askChildren(msg) {
        await msg.reply('üë∂ –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –ø–æ–µ–¥–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4)');
    }

    resetUserState(userId) {
        this.userData.set(userId, {
            isSearching: false,
            awaitingDeparture: false,
            awaitingCountry: false,
            awaitingNights: false,
            awaitingAdults: false,
            awaitingChildren: false,
            departure: null,
            country: null,
            nights: null,
            adults: null,
            children: null
        });
    }

    async safeSendMessage(msg, response) {
        try {
            // Use direct message sending instead of reply
            await this.client.sendMessage(msg.from, response);
        } catch (error) {
            console.error('Error sending message:', error);
            // Try alternative method if first fails
            try {
                await msg.reply(response);
            } catch (secondError) {
                console.error('Both sending methods failed:', secondError);
            }
        }
    }

    start() {
        console.log('Starting WhatsApp bot...');
        this.client.initialize()
            .then(() => console.log('Bot initialized successfully'))
            .catch(err => console.error('Failed to initialize bot:', err));
    }
}

// Export the WhatsAppBot class for use in server.js
module.exports = { WhatsAppBot }; 